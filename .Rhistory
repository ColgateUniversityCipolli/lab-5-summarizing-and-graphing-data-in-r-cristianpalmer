#Step 2: Loop through specific columns of CSV with my function
data_tibble <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble <- bind_rows(data_tibble, result)
}
view(data_tibble)
dim(data_tibble)
dim(essentia_data_csv)
library("stringr")
library("jsonlite")
library("tidyverse")
# Step 1: Load Data
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
essentia_data_csv <- read.csv("data/essentia.data.csv")
# Define Function
feature <- "overall_loudness"  # Change this to any numeric feature
my_function <- function(essentia_data_csv, essentia_data_allentown_csv, feature) { #Start of Function
allentown_feature <- essentia_data_allentown_csv[[feature]]
# Step 1 Part 1: Group data by artist
artist_grouped <- essentia_data_csv |>
group_by(artist) |>
# Step 2 Part 2: Calculate min, max, LF, and UF
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF = quantile(get(feature), 0.75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE)
) |>
# Step 2 Part 3: Create 2 new columns, out.of.range and unusal
mutate(
out.of.range = (allentown_feature < min) |
(allentown_feature > max),
unusual = (allentown_feature < LF) |
(allentown_feature > UF),
# Step 2 Part 4: Create new column, description
description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
} #End of Function
#Step 2: Loop through specific columns of CSV with my function
#Creates Tibble with data for all numeric columns
data_tibble <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble <- bind_rows(data_tibble, result)
}
view(data_tibble)
write_csv(data_tibble)
write_csv(data_tibble, "data_tibble.csv")
data <- read_csv("data_table.csv")
data.tibble
data.tibble <- read_csv("data_tibble.csv")
data.tibble
# Chunk 1
library(xtable)
data.tibble <- read_csv("data_tibble.csv")
data(data.tibble)
# Chunk 1
library(xtable)
data.tibble <- read_csv("data_tibble.csv")
data(data.tibble)
# Export the data to a LaTeX file
write.table(xtable(data_tibble), file = "data_tibble.tex", row.names = FALSE, col.names = TRUE, quote = FALSE)
help(xtable)
essentia_data_csv <- read.csv("data/essentia.data.csv")
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
data_tibble
library("stringr")
library("jsonlite")
library("tidyverse")
# Step 1: Load Data
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
essentia_data_csv <- read.csv("data/essentia.data.csv")
# Define Function
feature <- "overall_loudness"  # Change this to any numeric feature
my_function <- function(essentia_data_csv, essentia_data_allentown_csv, feature) { #Start of Function
allentown_feature <- essentia_data_allentown_csv[[feature]]
# Step 1 Part 1: Group data by artist
artist_grouped <- essentia_data_csv |>
group_by(artist) |>
# Step 2 Part 2: Calculate min, max, LF, and UF
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF = quantile(get(feature), 0.75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE)
) |>
# Step 2 Part 3: Create 2 new columns, out.of.range and unusal
mutate(
out.of.range = (allentown_feature < min) |
(allentown_feature > max),
unusual = (allentown_feature < LF) |
(allentown_feature > UF),
# Step 2 Part 4: Create new column, description
description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
} #End of Function
#Step 2: Loop through specific columns of CSV with my function
#Creates Tibble with data for all numeric columns
data_tibble <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble <- bind_rows(data_tibble, result)
}
data_tibble_everything <- bind_rows(data_tibble, result)
library("stringr")
library("jsonlite")
library("tidyverse")
# Step 1: Load Data
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
essentia_data_csv <- read.csv("data/essentia.data.csv")
# Define Function
feature <- "overall_loudness"  # Change this to any numeric feature
my_function <- function(essentia_data_csv, essentia_data_allentown_csv, feature) { #Start of Function
allentown_feature <- essentia_data_allentown_csv[[feature]]
# Step 1 Part 1: Group data by artist
artist_grouped <- essentia_data_csv |>
group_by(artist) |>
# Step 2 Part 2: Calculate min, max, LF, and UF
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF = quantile(get(feature), 0.75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE)
) |>
# Step 2 Part 3: Create 2 new columns, out.of.range and unusal
mutate(
out.of.range = (allentown_feature < min) |
(allentown_feature > max),
unusual = (allentown_feature < LF) |
(allentown_feature > UF),
# Step 2 Part 4: Create new column, description
description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
} #End of Function
#Step 2: Loop through specific columns of CSV with my function
#Creates Tibble with data for all numeric columns
data_tibble_everything <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_everything <- bind_rows(data_tibble, result)
}
view(data_tibble_everything)
library("stringr")
library("jsonlite")
library("tidyverse")
# Step 1: Load Data
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
essentia_data_csv <- read.csv("data/essentia.data.csv")
# Define Function
feature <- "overall_loudness"  # Change this to any numeric feature
my_function <- function(essentia_data_csv, essentia_data_allentown_csv, feature) { #Start of Function
allentown_feature <- essentia_data_allentown_csv[[feature]]
# Step 1 Part 1: Group data by artist
artist_grouped <- essentia_data_csv |>
group_by(artist) |>
# Step 2 Part 2: Calculate min, max, LF, and UF
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF = quantile(get(feature), 0.75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE)
) |>
# Step 2 Part 3: Create 2 new columns, out.of.range and unusal
mutate(
out.of.range = (allentown_feature < min) |
(allentown_feature > max),
unusual = (allentown_feature < LF) |
(allentown_feature > UF),
# Step 2 Part 4: Create new column, description
description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
} #End of Function
#Step 2: Loop through specific columns of CSV with my function
#Creates Tibble with data for all numeric columns
data_tibble_everything <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_everything <- bind_rows(data_tibble, result)
}
######################################
#Tibble With Specific Features Chosen#
######################################
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4:10)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble, result)
}
view(data_tibble_specific)
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4:10)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble, result)
}
view(data_tibble_specific)
result
library("stringr")
library("jsonlite")
library("tidyverse")
# Step 1: Load Data
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
essentia_data_csv <- read.csv("data/essentia.data.csv")
# Define Function
feature <- "overall_loudness"  # Change this to any numeric feature
my_function <- function(essentia_data_csv, essentia_data_allentown_csv, feature) { #Start of Function
allentown_feature <- essentia_data_allentown_csv[[feature]]
# Step 1 Part 1: Group data by artist
artist_grouped <- essentia_data_csv |>
group_by(artist) |>
# Step 2 Part 2: Calculate min, max, LF, and UF
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF = quantile(get(feature), 0.75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE)
) |>
# Step 2 Part 3: Create 2 new columns, out.of.range and unusal
mutate(
out.of.range = (allentown_feature < min) |
(allentown_feature > max),
unusual = (allentown_feature < LF) |
(allentown_feature > UF),
# Step 2 Part 4: Create new column, description
description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
} #End of Function
#Step 2: Loop through specific columns of CSV with my function
#Creates Tibble with data for all numeric columns
data_tibble_everything <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_everything <- bind_rows(data_tibble, result)
}
######################################
#Tibble With Specific Features Chosen#
######################################
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4:10)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble, result)
}
library("stringr")
library("jsonlite")
library("tidyverse")
# Step 1: Load Data
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
essentia_data_csv <- read.csv("data/essentia.data.csv")
# Define Function
feature <- "overall_loudness"  # Change this to any numeric feature
my_function <- function(essentia_data_csv, essentia_data_allentown_csv, feature) { #Start of Function
allentown_feature <- essentia_data_allentown_csv[[feature]]
# Step 1 Part 1: Group data by artist
artist_grouped <- essentia_data_csv |>
group_by(artist) |>
# Step 2 Part 2: Calculate min, max, LF, and UF
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF = quantile(get(feature), 0.75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE)
) |>
# Step 2 Part 3: Create 2 new columns, out.of.range and unusal
mutate(
out.of.range = (allentown_feature < min) |
(allentown_feature > max),
unusual = (allentown_feature < LF) |
(allentown_feature > UF),
# Step 2 Part 4: Create new column, description
description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
} #End of Function
#Step 2: Loop through specific columns of CSV with my function
#Creates Tibble with data for all numeric columns
data_tibble_everything <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_everything <- bind_rows(data_tibble, result)
}
######################################
#Tibble With Specific Features Chosen#
######################################
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4:10)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble, result_specific)
}
view(data_tibble_specific)
library("stringr")
library("jsonlite")
library("tidyverse")
# Step 1: Load Data
essentia_data_allentown_csv <- read.csv("data/essentia.data.allentown.csv")
essentia_data_csv <- read.csv("data/essentia.data.csv")
# Define Function
feature <- "overall_loudness"  # Change this to any numeric feature
my_function <- function(essentia_data_csv, essentia_data_allentown_csv, feature) { #Start of Function
allentown_feature <- essentia_data_allentown_csv[[feature]]
# Step 1 Part 1: Group data by artist
artist_grouped <- essentia_data_csv |>
group_by(artist) |>
# Step 2 Part 2: Calculate min, max, LF, and UF
summarize(
min = min(get(feature), na.rm = TRUE),
LF = quantile(get(feature), 0.25, na.rm = TRUE) - 1.5 * IQR(get(feature), na.rm = TRUE),
UF = quantile(get(feature), 0.75, na.rm = TRUE) + 1.5 * IQR(get(feature), na.rm = TRUE),
max = max(get(feature), na.rm = TRUE)
) |>
# Step 2 Part 3: Create 2 new columns, out.of.range and unusal
mutate(
out.of.range = (allentown_feature < min) |
(allentown_feature > max),
unusual = (allentown_feature < LF) |
(allentown_feature > UF),
# Step 2 Part 4: Create new column, description
description = case_when(
out.of.range ~ "Out of Range",
unusual ~ "Outlying",
TRUE ~ "Within Range"
)
)
} #End of Function
#Step 2: Loop through specific columns of CSV with my function
#Creates Tibble with data for all numeric columns
data_tibble_everything <- tibble()
for (column in colnames(essentia_data_csv)[c(-1,-2,-3,-58,-59,-69,-70)]) {
result <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_everything <- bind_rows(data_tibble, result)
}
######################################
#Tibble With Specific Features Chosen#
######################################
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4:10)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
view(data_tibble_everything)
view(data_tibble_specific)
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(1)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(1)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
view(data_tibble_specific)
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c("overall_loudness")]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(overall_loudness)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c("tempo")]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c("overall_loudness")]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4:10)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(4,5,6,7,8,9)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
view(data_tibble_specific)
colnames(essentia_data_csv)
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(9)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
view(data_tibble_specific)
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(12,13,14,15)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
view(data_tibble_specific)
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(12,13,15)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
view(data_tibble_specific)
data_tibble_specific <- tibble()
for (column in colnames(essentia_data_csv)[c(12,13,15,17,19,23,24,39,43,45)]) {
result_specific <- my_function(essentia_data_csv, essentia_data_allentown_csv, column) |>
mutate(feature = column) |>
select(feature, everything())
data_tibble_specific <- bind_rows(data_tibble_specific, result_specific)
}
view(data_tibble_specific)
write_csv(data_tibble_specific, data_tibble_specific.csv)
write_csv(data_tibble_specific.csv, data_tibble_specific)
write_csv(data_tibble_specific, "data_tibble_specific.csv")
data_tibble
# Chunk 1
suppressPackageStartupMessages(library(xtable))
suppressPackageStartupMessages(library(tidyverse))
# Read the CSV file
data_tibble_specific <- read_csv("data_tibble_specific.csv")
# Print the entire data
print(data_tibble_specific, n=30)
data_selected_columns <- data_tibble_specific |>
select(feature, artist, description)
view(data_selected_columns)
type(data_selected_columns)
data_selected_columns <- data_tibble_specific |>
select(feature, artist, out.of.range, unusual, description)
view(data_selected_columns)
write_csv(data_selected_columns, "data_selected_columns.csv")
